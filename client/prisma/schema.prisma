// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  image          String?
  hashedPassword String?
  emailVerified  DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  account        Account? // each user can be linked to an Account by way of back refernce. 
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @unique @db.ObjectId //unique scalar to store the identifier for the related user, unique ensures each account only has one account. 
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // this establishes a relation to the 'User' model. The useId field in Account maps to the id of a User. This means that i cannot create an account without speccifying a valid User 'id' 

  @@unique([provider, providerAccountId])
}

// we have a field that stores the foreignkey and then we have a refernce that this foreign key holder is referring to 

// Account is where the foreign key is store after we create a user and we return objectId method
// userId refrences the User model objectId that is created
// userId is mandatory 
// so in this case i am saying 

// an account cannot exist unless a user exist 
